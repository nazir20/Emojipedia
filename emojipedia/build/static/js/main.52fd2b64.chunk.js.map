{"version":3,"sources":["Emojipedia.js","components/Entry.js","components/NewEmoji/EmojiForm.js","components/NewEmoji/NewEmoji.js","App.js","index.js"],"names":["emojipedia","id","emoji","name","meaning","Entry","props","className","role","EmojiForm","useState","emojiIcon","setEmojiIcon","emojiName","setEmojiName","emojiMeaning","setEmojiMeaning","onSubmit","event","preventDefault","emojiData","onSaveEmojiData","required","type","placeholder","onChange","target","value","onClick","onCancel","NewEmoji","isAdding","setIsAdding","newEmojiData","Math","random","toString","onAddEmoji","App","emojis","setEmojis","prevEmojis","map","item","ReactDOM","createRoot","document","getElementById","render"],"mappings":"oSAgBiBA,G,MAhBE,CACf,CACEC,GAAI,EACJC,MAAO,eACPC,KAAM,iCACNC,QACE,6JAEJ,CACEH,GAAI,EACJC,MAAO,eACPC,KAAM,2BACNC,QACE,2K,eCEOC,EAbD,SAACC,GACX,OACI,qBAAKC,UAAU,oBAAf,SACI,sBAAKA,UAAU,OAAf,UACI,+BACI,sBAAMA,UAAU,QAAQC,KAAK,MAAM,aAAW,eAA9C,SAA8DF,EAAMJ,QACpE,+BAAOI,EAAMH,UAEjB,6BAAKG,EAAMF,cAI1B,E,OCmDcK,G,YA/DG,SAACH,GAGf,MAAkCI,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAwCJ,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAuBA,OACI,uBAAMC,SAbY,SAACC,GACnBA,EAAMC,iBACN,IAAMC,EAAY,CACd,MAAST,EACT,KAAQE,EACR,QAAWE,GAEfT,EAAMe,gBAAgBD,GACtBR,EAAa,IACbE,EAAa,IACbE,EAAgB,GACnB,EAEG,UACI,sBAAKT,UAAU,UAAf,UACI,qBAAKA,UAAU,WAAf,SACI,uBACIe,UAAQ,EAACC,KAAK,OACdhB,UAAU,eACViB,YAAY,aACZC,SA7BW,SAACP,GAC5BN,EAAaM,EAAMQ,OAAOC,MAC7B,EA4BmBA,MAAOhB,MAGf,qBAAKJ,UAAU,WAAf,SACI,uBACIe,UAAQ,EAACC,KAAK,OACdhB,UAAU,eACViB,YAAY,aACZC,SAnCW,SAACP,GAC5BJ,EAAaI,EAAMQ,OAAOC,MAC7B,EAkCmBA,MAAOd,SAInB,qBAAKN,UAAU,OAAf,SACI,0BACIe,UAAQ,EAACf,UAAU,eACnBiB,YAAY,gBACZC,SAzCkB,SAACP,GAC9BF,EAAgBE,EAAMQ,OAAOC,MACjC,EAwCeA,MAAQZ,MAGhB,wBAAQa,QAAStB,EAAMuB,SAAUN,KAAK,SAAShB,UAAU,gBAAzD,oBACA,wBAAQgB,KAAK,SAAShB,UAAU,kBAAhC,yBAGX,GCnCcuB,EA1BE,SAACxB,GAEd,MAAgCI,oBAAS,GAAzC,mBAAOqB,EAAP,KAAiBC,EAAjB,KAeA,OACI,sBAAKzB,UAAU,sBAAf,UACI,qBAAKA,UAAU,cAAf,UACOwB,GAAY,wBAAQH,QAjBR,WACvBI,GAAY,EACf,EAe+DzB,UAAU,uBAA/C,6BAEjBwB,GAAY,cAAC,EAAD,CAAWV,gBAbJ,SAACY,GAC1B,IAAMb,EAAS,2BACRa,GADQ,IAEXhC,GAAIiC,KAAKC,SAASC,aAEtB9B,EAAM+B,WAAWjB,GACjBY,GAAY,EACf,EAMuEH,SAhB9C,WACtBG,GAAY,EACf,MAiBJ,ECOcM,MA9Bf,WACE,MAA4B5B,mBAASV,GAArC,mBAAOuC,EAAP,KAAeC,EAAf,KASA,OACE,sBAAKjC,UAAU,YAAf,UACE,cAAC,EAAD,CAAU8B,WAVU,SAACjB,GACvBoB,GAAU,SAAAC,GACR,MAAM,CACHrB,GADH,mBACiBqB,GAElB,GACF,IAKG,qBAAKlC,UAAU,MAAf,SAEIgC,EAAOG,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,CAEEzC,MAASyC,EAAKzC,MACdC,KAAQwC,EAAKxC,KACbC,QAAWuC,EAAKvC,SAHVuC,EAAK1C,GAFJ,MAUb,iCAAQ,uDAGf,EC5BY2C,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAO,cAAC,EAAD,I","file":"static/js/main.52fd2b64.chunk.js","sourcesContent":["const emojipedia = [\n    {\n      id: 1,\n      emoji: \"😊\",\n      name: \"Smiling Face with Smiling Eyes\",\n      meaning:\n        \"“A yellow face with smiling eyes and a broad, closed smile turning up to rosy cheeks. Often expresses genuine happiness and warm, positive feelings.\"\n    },\n    {\n      id: 2,\n      emoji: \"🙏\",\n      name: \"Person With Folded Hands\",\n      meaning:\n        \"Two hands pressed together. Is currently very introverted, saying a prayer, or hoping for enlightenment. Is also used as a “high five” or to say thank you.\"\n    }\n  ];\n  export default emojipedia","import React from \"react\";\nimport './Entry.css'\nconst Entry = (props) =>{\n    return (\n        <div className=\"col-lg-3 col-md-6\">\n            <div className=\"term\">\n                <dt>\n                    <span className=\"emoji\" role=\"img\" aria-label=\"Tense Biceps\">{props.emoji}</span>\n                    <span>{props.name}</span>\n                </dt>\n                <dd>{props.meaning}</dd>\n            </div>\n        </div>\n    )\n}\nexport default Entry","import React, { useState } from \"react\";\nimport './EmojiForm.css'\nconst EmojiForm = (props) =>{\n\n\n    const [emojiIcon, setEmojiIcon] = useState('')\n    const [emojiName, setEmojiName] = useState('')\n    const [emojiMeaning, setEmojiMeaning] = useState('')\n\n    const emojiIconChangeHandler = (event) =>{\n        setEmojiIcon(event.target.value)\n    }\n    const emojiNameChangeHandler = (event) =>{\n        setEmojiName(event.target.value)\n    }\n    const emojiMeaningChangeHandler = (event) =>{\n         setEmojiMeaning(event.target.value)\n    }\n    const submitHandler = (event) =>{\n        event.preventDefault()\n        const emojiData = {\n            'emoji': emojiIcon,\n            'name': emojiName,\n            'meaning': emojiMeaning\n        }\n        props.onSaveEmojiData(emojiData)\n        setEmojiIcon('')\n        setEmojiName('')\n        setEmojiMeaning('')\n    }\n    return (\n        <form onSubmit={submitHandler}>\n            <div className=\"row g-3\">\n                <div className=\"col-sm-6\">\n                    <input \n                        required type=\"text\" \n                        className=\"form-control\" \n                        placeholder=\"Emoji Icon\"\n                        onChange={emojiIconChangeHandler}\n                        value={emojiIcon}\n                    />\n                </div>\n                <div className=\"col-sm-6\">\n                    <input \n                        required type=\"text\" \n                        className=\"form-control\" \n                        placeholder=\"Emoji Name\"\n                        onChange={emojiNameChangeHandler}\n                        value={emojiName}\n                    />\n                </div>\n            </div>\n            <div className=\"mb-3\">\n                <textarea \n                    required className=\"form-control\" \n                    placeholder=\"Emoji Meaning\"\n                    onChange = {emojiMeaningChangeHandler}\n                    value ={emojiMeaning}\n                />\n            </div>\n            <button onClick={props.onCancel} type=\"button\" className=\"btn btn-light\">Cancel</button>\n            <button type=\"submit\" className=\"btn btn-success\">Add Emoji</button>\n        </form>\n    )\n}\nexport default EmojiForm","import React, { useState } from \"react\";\nimport './NewEmoji.css'\nimport EmojiForm from \"./EmojiForm\";\nconst NewEmoji = (props) =>{\n\n    const [isAdding, setIsAdding] = useState(false)\n    const startAddingHandler = () =>{\n        setIsAdding(true)\n    }\n    const stopAddingHandler = () =>{\n        setIsAdding(false)\n    }\n    const saveEmojiDataHandler = (newEmojiData) =>{\n        const emojiData = {\n            ...newEmojiData,\n            id: Math.random().toString()\n        }\n        props.onAddEmoji(emojiData)\n        setIsAdding(false)\n    }\n    return (\n        <div className=\"container new-emoji\">\n            <div className=\"text-center\">\n                { !isAdding && <button onClick={startAddingHandler} className=\"btn btn-light addBtn\">Add New Emoji</button>}\n            </div>\n            { isAdding && <EmojiForm onSaveEmojiData={saveEmojiDataHandler} onCancel={stopAddingHandler}/>}\n        </div>\n    )\n}\nexport default NewEmoji","import React, { useState } from \"react\";\nimport './App.css'\nimport emojipedia from \"./Emojipedia\";\nimport Entry from \"./components/Entry\";\nimport NewEmoji from \"./components/NewEmoji/NewEmoji\";\nfunction App() {\n  const [emojis, setEmojis] = useState(emojipedia)\n  const addEmojiHandler = (emojiData) =>{\n    setEmojis(prevEmojis =>{\n      return (\n        [emojiData, ...prevEmojis]\n      )\n    })\n  }\n\n  return (\n    <div className=\"container\">\n      <NewEmoji onAddEmoji = {addEmojiHandler}/>\n      <div className=\"row\">\n        {\n          emojis.map((item) =>(\n            <Entry \n              key ={item.id}  \n              emoji = {item.emoji}\n              name = {item.name}\n              meaning = {item.meaning}\n            />\n          ))\n        }\n      </div>\n        <center><small>copyright@2022</small></center>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}